datasource db {
  provider = "postgresql"
  url = "***"
}

generator prisma_client_js {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  plexUsername   String?         @unique
  password       String
  role           String          @default("user")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  linkedAccounts LinkedAccount[]
  servers        PlexServer[]
  tokens         Token[]
  scrobbles      ScrobbleItem[]
  Session        Session[]
}

enum LinkedAccountService {
  ANILIST
}

model LinkedAccount {
  id                 String               @id @default(cuid())
  service            LinkedAccountService
  accountId          String               @unique
  accessToken        String
  accessTokenExpires DateTime?
  refreshToken       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             String               @unique
  user               User                 @relation(fields: [userId], references: [id])
}

model Token {
  id        String   @id @default(cuid())
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model PlexServer {
  id        String   @id @default(cuid())
  ip        String
  name      String
  uuid      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?
}

enum ScrobbleInstanceStatus {
  SUCCESS
  PENDING
  IGNORED
  ERROR
}

model ScrobbleItem {
  id              String             @id @default(cuid())
  providerMediaId String
  episode         Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  attempts        ScrobbleInstance[]
  user            User               @relation(fields: [userId], references: [id])
  userId          String
}

model ScrobbleInstance {
  id             String                 @id @default(cuid())
  status         ScrobbleInstanceStatus
  statusReason   String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  scrobble       ScrobbleItem           @relation(fields: [scrobbleItemId], references: [id])
  scrobbleItemId String
}

model Session {
  id                 String    @id @default(cuid())
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  expiresAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])
}
